package ink.anh.lingo.file;

import java.io.File;
import java.util.Arrays;
import java.util.Comparator;

import org.bukkit.command.CommandSender;

import ink.anh.lingo.ItemLingo;

public class DirectoryContents {

    public static void listDirectoryContents(CommandSender sender, String directoryPath) {
        if (!isPathAllowed(directoryPath)) {
            sender.sendMessage("–ù–µ –¥–æ–∑–≤–æ–ª–µ–Ω–æ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∑ —Ü—ñ—î—é –ø–∞–ø–∫–æ—é: " + directoryPath);
            return;
        }

        File directory = new File(ItemLingo.getInstance().getServer().getWorldContainer(), "plugins" + File.separator + directoryPath);

        if (directory.exists() && directory.isDirectory()) {
            File[] fileList = directory.listFiles();

            if (fileList != null) {
                // –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ —Ç–∞ –ø–∞–ø–æ–∫
                Arrays.sort(fileList, Comparator.comparing(File::isFile)
                                                .thenComparing(File::getName, String.CASE_INSENSITIVE_ORDER));

                for (File file : fileList) {
                    if (file.isDirectory()) {
                    	sender.sendMessage("üìÅ " + file.getName());
                    } else {
                    	sender.sendMessage("üìÑ " + file.getName());
                    }
                }
            } else {
            	sender.sendMessage("–ü–∞–ø–∫–∞ –ø–æ—Ä–æ–∂–Ω—è –∞–±–æ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ó—ó —á–∏—Ç–∞–Ω–Ω—ñ.");
            }
        } else {
        	sender.sendMessage("–ü–∞–ø–∫–∞ –Ω–µ —ñ—Å–Ω—É—î –∞–±–æ —Ü–µ –Ω–µ –ø–∞–ø–∫–∞.");
        }
    }

    private static boolean isPathAllowed(String path) {
    	return ItemLingo.getInstance().getConfigurationManager().isPathAllowed(path);
    }
}
